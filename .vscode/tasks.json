{
  // VS Code tasks to run bulk cleanup safely. Run in order.
  "version": "2.0.0",
  "tasks": [
    {
      "label": "backup-html",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html); do [ -f \"$f.bak\" ] || cp \"$f\" \"$f.bak\"; done; echo 'Backups created (*.bak)'",
      "problemMatcher": []
    },
    {
      "label": "remove-feed-links",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html '<link[^>]+feed\\?type=(rss|atom)'); do perl -0777 -pe 's/\\n?\\s*<link[^>]*feed\\?type=(?:rss|atom)[^>]*>\\s*\\r?\\n?//g' -i \"$f\"; done; echo 'Removed RSS/Atom feed links'",
      "problemMatcher": [],
      "dependsOn": ["backup-html"]
    },
    {
      "label": "remove-google-fonts-cssd2d5",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html 'cssd2d5'); do perl -0777 -pe 's/\\n?\\s*<link[^>]*href=\\\"[^\\\"]*cssd2d5[^\\\"]*\\\"[^>]*>\\s*\\r?\\n?//g' -i \"$f\"; done; echo 'Removed cssd2d5 (Google Fonts) links'",
      "problemMatcher": [],
      "dependsOn": ["backup-html"]
    },
    {
      "label": "remove-head-style-blocks",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html '<style'); do perl -0777 -pe 's/(<head[\s\S]*?)(<style[\s\S]*?<\\/style>)/$1/g' -i \"$f\"; done; echo 'Removed <style> blocks inside <head>'",
      "problemMatcher": [],
      "dependsOn": ["backup-html"]
    },
    {
      "label": "async-sliders-css",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html 'media/sliders/css/style.min.css'); do perl -0777 -pe 's#<link[^>]*href=\"[^\"]*/media/sliders/css/style\.min\.css\"[^>]*>#<link rel=\"preload\" href=\"../media/sliders/css/style.min.css\" as=\"style\">\\\n<link rel=\"stylesheet\" href=\"../media/sliders/css/style.min.css\" media=\"print\" onload=\"this.media=\'all\'\">\\\n<noscript><link rel=\"stylesheet\" href=\"../media/sliders/css/style.min.css\"></noscript>#g' -i \"$f\"; done; echo 'Converted sliders CSS to async'",
      "problemMatcher": []
    },
    {
      "label": "async-content-accordion-css",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html 'media/css/content-accordion.css'); do perl -0777 -pe 's#<link[^>]*href=\"[^\"]*/media/css/content-accordion\.css\"[^>]*>#<link rel=\"preload\" href=\"../media/css/content-accordion.css\" as=\"style\">\\\n<link rel=\"stylesheet\" href=\"../media/css/content-accordion.css\" media=\"print\" onload=\"this.media=\'all\'\">\\\n<noscript><link rel=\"stylesheet\" href=\"../media/css/content-accordion.css\"></noscript>#g' -i \"$f\"; done; echo 'Converted content-accordion CSS to async'",
      "problemMatcher": []
    },
    {
      "label": "report-inline-hex-html",
      "type": "shell",
      "command": "rg -n --type-add html:*.html '#[0-9a-fA-F]{3,8}\\b' | head -n 200",
      "problemMatcher": []
    },
    {
      "label": "map-safe-theme-hex-html",
      "type": "shell",
      "command": "set -e; for f in $(rg -l --type-add html:*.html '#[0-9a-fA-F]{3,8}'); do perl -0777 -pe 's/#(?:E0162B|e0162b)\b/var(--primary-color)/g; s/#(?:004c75|000d4d)\b/var(--link-color)/g; s/#(?:f4f6f7|F4F6F7|f0f0ee|F0F0EE)\b/var(--surface-1)/g; s/#(?:fff|FFF|ffffff|FFFFFF)\b/var(--surface-color)/g; s/#(?:000|000000)\b/var(--text-color)/g; s/#333333\b/var(--color-strong)/g' -i \"$f\"; done; echo 'Applied safe theme mappings to inline colors'",
      "problemMatcher": [],
      "dependsOn": ["backup-html"]
    }
  ]
}

